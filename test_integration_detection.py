#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de test pour l'int√©gration du syst√®me de d√©tection de feuilles
"""

import sys
import os
import time
import threading

# Ajouter le chemin du module
sys.path.append(os.path.dirname(__file__))

def test_detection_module():
    """Test du module de d√©tection seul"""
    print("=== Test du module de d√©tection ===")
    
    try:
        from paper_detection_module import PaperDetectionModule
        
        def callback_test(detection_active):
            print(f"Callback re√ßu : d√©tection = {detection_active}")
        
        # Cr√©er l'instance
        detector = PaperDetectionModule(interface_callback=callback_test)
        
        print("Module cr√©√© avec succ√®s")
        print(f"PLC cible : {detector.detection_plc_ip}:{detector.detection_plc_port}")
        print(f"Bit de d√©tection : W{detector.detection_bit_address}.00")
        print(f"Serveur d'inf√©rence : {detector.inference_server_url}")
        
        # Test des connexions
        print("\n--- Test des connexions ---")
        
        # Test PLC
        if detector.connect_to_detection_plc():
            print("‚úì Connexion PLC r√©ussie")
            detector.detection_fins_instance.close()
        else:
            print("‚úó Connexion PLC √©chou√©e")
        
        # Test cam√©ra
        if detector.initialize_camera():
            print("‚úì Cam√©ra initialis√©e")
            detector.camera.release()
        else:
            print("‚úó Cam√©ra non disponible")
        
        # Test Socket.IO
        try:
            if detector.setup_socketio():
                print("‚úì Socket.IO connect√©")
                detector.sio.disconnect()
            else:
                print("‚úó Socket.IO non disponible")
        except:
            print("‚úó Serveur d'inf√©rence inaccessible")
        
        print("\n--- Test termin√© ---")
        
    except ImportError as e:
        print(f"‚ùå Impossible d'importer le module : {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur lors du test : {e}")
        return False
    
    return True

def test_interface_integration():
    """Test de l'int√©gration avec l'interface"""
    print("\n=== Test de l'int√©gration interface ===")
    
    try:
        # Simuler l'importation de l'interface
        from interface_graphique_production_v2 import InterfaceGraphiqueProductionV2
        
        print("Interface import√©e avec succ√®s")
        
        # V√©rifier que les nouvelles m√©thodes existent
        interface = InterfaceGraphiqueProductionV2()
        
        # V√©rifier les attributs
        if hasattr(interface, 'paper_detection_active'):
            print("‚úì Attribut paper_detection_active pr√©sent")
        else:
            print("‚úó Attribut paper_detection_active manquant")
        
        if hasattr(interface, 'paper_detection'):
            print("‚úì Attribut paper_detection pr√©sent")
        else:
            print("‚úó Attribut paper_detection manquant")
        
        # V√©rifier les m√©thodes
        if hasattr(interface, 'on_paper_detection'):
            print("‚úì M√©thode on_paper_detection pr√©sente")
        else:
            print("‚úó M√©thode on_paper_detection manquante")
        
        if hasattr(interface, 'clear_paper_detection_alert'):
            print("‚úì M√©thode clear_paper_detection_alert pr√©sente")
        else:
            print("‚úó M√©thode clear_paper_detection_alert manquante")
        
        print("‚úì Int√©gration interface valid√©e")
        
        # Ne pas d√©marrer l'interface compl√®te pour √©viter les conflits
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test d'int√©gration : {e}")
        return False
    
    return True

def test_dependencies():
    """Test des d√©pendances requises"""
    print("\n=== Test des d√©pendances ===")
    
    dependencies = [
        'cv2',           # OpenCV
        'socketio',      # Socket.IO
        'requests',      # Requ√™tes HTTP
        'numpy',         # NumPy
        'threading',     # Threading (standard)
        'struct',        # Struct (standard)
        'base64'         # Base64 (standard)
    ]
    
    for dep in dependencies:
        try:
            __import__(dep)
            print(f"‚úì {dep}")
        except ImportError:
            print(f"‚úó {dep} - MANQUANT")
    
    return True

def main():
    """Fonction principale de test"""
    print("üîç Test d'int√©gration du syst√®me de d√©tection de feuilles")
    print("=" * 60)
    
    # Test des d√©pendances
    test_dependencies()
    
    # Test du module de d√©tection
    test_detection_module()
    
    # Test de l'int√©gration interface
    test_interface_integration()
    
    print("\n" + "=" * 60)
    print("‚úÖ Tests termin√©s")
    print("\nPour un test complet :")
    print("1. V√©rifier que le PLC 192.168.0.166 est accessible")
    print("2. V√©rifier que le serveur d'inf√©rence 192.168.0.71:5050 est actif")
    print("3. V√©rifier qu'une cam√©ra USB est connect√©e")
    print("4. Lancer l'interface compl√®te avec python interface_graphique_production_v2.py")

if __name__ == "__main__":
    main() 